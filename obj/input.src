; Zilog eZ80 ANSI C Compiler Release 3.4
; -optsize -noreduceopt -nomodsect -peephole -globalopt
; -localcse -const=ROM 
	FILE	"SRC\INPUT.C"
	.assume ADL=1
	SEGMENT BSS
_key:
	DS	1
_input_buffer_left:
	DS	150
_input_buffer_right:
	DS	150
_second_button_pressed:
	DS	1
_alpha_button_pressed:
	DS	1
_var1_position:
	DS	1
_var2_position:
	DS	1
_last_queries:
	DS	3
	SEGMENT DATA
_selected_history_item:
	DB	0
;    1	/*
;    2	 
;    3	 Copyright (c) 2019 Hannes Eberhard
;    4	 
;    5	 Permission is hereby granted, free of charge, to any person obtaining a copy
;    6	 of this software and associated documentation files (the "Software"), to deal
;    7	 in the Software without restriction, including without limitation the rights
;    8	 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
;    9	 copies of the Software, and to permit persons to whom the Software is
;   10	 furnished to do so, subject to the following conditions:
;   11	 
;   12	 The above copyright notice and this permission notice shall be included in all
;   13	 copies or substantial portions of the Software.
;   14	 
;   15	 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
;   16	 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
;   17	 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
;   18	 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
;   19	 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
;   20	 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
;   21	 SOFTWARE.
;   22	 
;   23	 */
;   24	
;   25	#include "includes.h"
;   26	
;   27	sk_key_t key;
;   28	char input_buffer_left[INPUT_BUFFER_SIZE];
;   29	char input_buffer_right[INPUT_BUFFER_SIZE];
;   30	bool second_button_pressed;
;   31	bool alpha_button_pressed;
;   32	int8_t var1_position;
;   33	int8_t var2_position;
;   34	
;   35	history* last_queries;
;   36	uint8_t selected_history_item = 0;
	SEGMENT CODE
;   37	
;   38	history_item* new_history_item(const char* input, const char* output) {
_new_history_item:
	LD	HL,-3
	CALL	__frameset
;   39	    history_item* result = calloc(1 , sizeof(history_item));
	LD	BC,6
	PUSH	BC
	LD	BC,1
	PUSH	BC
	CALL	_calloc
	POP	BC
	POP	BC
	LD	(IX+-3),HL
;   40	    result->input = calloc(sizeof(input) + 1, sizeof(char));
	LD	BC,1
	PUSH	BC
	LD	BC,4
	PUSH	BC
	CALL	_calloc
	POP	BC
	POP	BC
	LD	IY,(IX+-3)
;   41	    result->output = calloc(sizeof(output) + 1, sizeof(char));
	LD	BC,1
	PUSH	BC
	LD	BC,4
	PUSH	BC
	LD	(IY+0),HL
	CALL	_calloc
	POP	BC
	POP	BC
	LD	IY,(IX+-3)
	LD	(IY+3),HL
;   42	    strcpy(result->input, input);
	LD	BC,(IX+6)
	PUSH	BC
	LD	BC,(IY+0)
	PUSH	BC
	CALL	_strcpy
	POP	BC
	POP	BC
;   43	    strcpy(result->output, output);
	LD	BC,(IX+9)
	PUSH	BC
	LD	IY,(IX+-3)
	LD	BC,(IY+3)
	PUSH	BC
	CALL	_strcpy
	POP	BC
	POP	BC
;   44	    return result;
	LD	HL,(IX+-3)
;   45	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _new_history_item ***************************
;Name                         Addr/Register   Size   Type
;_strcpy                             IMPORT  -----   function
;_calloc                             IMPORT  -----   function
;result                                IX-3      3   variable
;output                                IX+9      3   parameter
;input                                 IX+6      3   parameter


; Stack Frame Size: 15 (bytes)
;       Spill Code: 0 (instruction)


;   46	
;   47	void free_history_item(history_item* source) {
_free_history_item:
	CALL	__frameset0
;   48	    free(source->input);
	LD	IY,(IX+6)
	LD	BC,(IY+0)
	PUSH	BC
	CALL	_free
	POP	BC
;   49	    free(source->output);
	LD	IY,(IX+6)
	LD	BC,(IY+3)
	PUSH	BC
	CALL	_free
	POP	BC
;   50	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _free_history_item ***************************
;Name                         Addr/Register   Size   Type
;_free                               IMPORT  -----   function
;source                                IX+6      3   parameter


; Stack Frame Size: 9 (bytes)
;       Spill Code: 0 (instruction)


;   51	
;   52	void free_history(history* source) {
_free_history:
	LD	HL,-1
	CALL	__frameset
;   53	    
;   54	    uint8_t i;
;   55	    
;   56	    for (i = 0; i < source->item_count; i++) {
	LD	(IX+-1),0
	JR	L_5
L_3:
;   57	        free_history_item(source->items[i]);
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	LD	IY,(IX+6)
	LEA	HL,IY+1
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_free_history_item
	POP	BC
	INC	(IX+-1)
;   58	    }
L_5:
	LD	A,(IX+-1)
	LD	IY,(IX+6)
	CP	A,(IY+0)
	JR	C,L_3
;   59	    
;   60	    free(source);
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_free
	POP	BC
;   61	    
;   62	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _free_history ***************************
;Name                         Addr/Register   Size   Type
;_free                               IMPORT  -----   function
;i                                     IX-1      1   variable
;source                                IX+6      3   parameter


; Stack Frame Size: 10 (bytes)
;       Spill Code: 0 (instruction)


;   63	
;   64	void append_new_history_item(history* last_queries, const char* input, const char* output) {
_append_new_history_item:
	LD	HL,-1
	CALL	__frameset
;   65	    
;   66	    uint8_t i;
;   67	    
;   68	    if (last_queries->item_count == 10) {
	LD	IY,(IX+6)
	LD	A,(IY+0)
	CP	A,10
	JR	NZ,L_14
;   69	        free_history_item(last_queries->items[9]);
	LD	IY,(IX+6)
	LEA	HL,IY+28
	LD	BC,(HL)
	PUSH	BC
	CALL	_free_history_item
	POP	BC
;   70	        last_queries->item_count--;
	LD	IY,(IX+6)
	LD	A,(IY+0)
	DEC	A
	LD	(IY+0),A
;   71	    }
L_14:
;   72	
;   73	    for (i = last_queries->item_count; i > 0; i--) {
	LD	IY,(IX+6)
	LD	A,(IY+0)
	LD	(IX+-1),A
	JR	L_13
L_11:
;   74	        last_queries->items[i] = last_queries->items[i - 1];
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	DEC	HL
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,HL
	LD	A,(IX+-1)
	LD	IY,(IX+6)
	LEA	HL,IY+1
	ADD	HL,BC
	LD	BC,(HL)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	ADD	HL,HL
	ADD	HL,DE
	LD	DE,HL
	LEA	HL,IY+1
	ADD	HL,DE
	LD	(HL),BC
	DEC	(IX+-1)
;   75	    }
L_13:
	XOR	A,A
	CP	A,(IX+-1)
	JR	C,L_11
;   76	    
;   77	    last_queries->items[0] = new_history_item(input, output);
	LD	BC,(IX+12)
	PUSH	BC
	LD	BC,(IX+9)
	PUSH	BC
	CALL	_new_history_item
	POP	BC
	POP	BC
	LD	IY,(IX+6)
	LD	(IY+1),HL
;   78	    
;   79	    last_queries->item_count++;
	LD	A,(IY+0)
	INC	A
	LD	(IY+0),A
;   80	    
;   81	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _append_new_history_item ***************************
;Name                         Addr/Register   Size   Type
;i                                     IX-1      1   variable
;output                               IX+12      3   parameter
;input                                 IX+9      3   parameter
;last_queries                          IX+6      3   parameter


; Stack Frame Size: 16 (bytes)
;       Spill Code: 0 (instruction)


;   82	
;   83	void shift_char(char* a, char* b, int8_t direction) {
_shift_char:
	LD	HL,-8
	CALL	__frameset
;   84	    
;   85	    char* temp = calloc(INPUT_BUFFER_SIZE, sizeof(char));
	LD	BC,1
	PUSH	BC
	LD	BC,150
	PUSH	BC
	CALL	_calloc
	POP	BC
	POP	BC
	LD	(IX+-4),HL
;   86	    char transfer;
;   87	    
;   88	    if (direction == 1 && strlen(b) > 0) {
	LD	A,(IX+12)
	CP	A,1
	JR	NZ,L_22
	LD	BC,(IX+9)
	PUSH	BC
	CALL	_strlen
	POP	BC
	LD	BC,HL
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	JR	NC,L_22
;   89	        a[strlen(a) + 1] = '\0';
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strlen
	POP	BC
	LD	BC,HL
	INC	BC
	LD	HL,(IX+6)
	ADD	HL,BC
	LD	(HL),0
;   90	        a[strlen(a)] = b[0];
	LD	DE,(IX+9)
	LD	BC,(IX+6)
	PUSH	BC
	LD	(IX+-7),DE
	LD	(IX+-8),D
	CALL	_strlen
	LD	DE,(IX+-7)
	LD	D,(IX+-8)
	POP	BC
	LD	BC,(IX+6)
	LD	IY,DE
	LD	A,(IY)
	ADD	HL,BC
	LD	(HL),A
;   91	        strcpy(b, b + 1);
	LD	BC,(IX+9)
	INC	BC
	PUSH	BC
	LD	BC,(IX+9)
	PUSH	BC
	CALL	_strcpy
	POP	BC
	POP	BC
;   92	    } else if (direction == -1 && strlen(a) > 0) {
	JR	L_23
L_22:
	LD	A,(IX+12)
	CP	A,-1
	JR	NZ,L_23
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strlen
	POP	BC
	LD	BC,HL
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	JR	NC,L_23
;   93	        transfer = a[strlen(a) - 1];
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strlen
	POP	BC
	LD	BC,HL
	DEC	BC
	LD	HL,(IX+6)
	ADD	HL,BC
	LD	A,(HL)
	LD	(IX+-1),A
;   94	        a[strlen(a) - 1] = '\0';
	LD	BC,(IX+6)
	PUSH	BC
	CALL	_strlen
	POP	BC
	LD	BC,HL
	DEC	BC
	LD	HL,(IX+6)
	ADD	HL,BC
	LD	(HL),0
;   95	        memmove(&b[1], b, strlen(b));
	LD	BC,(IX+9)
	PUSH	BC
	CALL	_strlen
	POP	BC
	PUSH	HL
	LD	BC,(IX+9)
	PUSH	BC
	LD	BC,(IX+9)
	INC	BC
	PUSH	BC
	CALL	_memmove
	POP	BC
	POP	BC
	POP	BC
;   96	        b[0] = transfer;
	LD	HL,(IX+9)
	LD	A,(IX+-1)
	LD	(HL),A
;   97	    }
L_23:
;   98	    
;   99	    free(temp);
	LD	BC,(IX+-4)
	PUSH	BC
	CALL	_free
	POP	BC
;  100	    
;  101	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _shift_char ***************************
;Name                         Addr/Register   Size   Type
;_free                               IMPORT  -----   function
;_memmove                            IMPORT  -----   function
;_strcpy                             IMPORT  -----   function
;_strlen                             IMPORT  -----   function
;_calloc                             IMPORT  -----   function
;temp                                  IX-4      3   variable
;transfer                              IX-1      1   variable
;direction                            IX+12      1   parameter
;b                                     IX+9      3   parameter
;a                                     IX+6      3   parameter


; Stack Frame Size: 23 (bytes)
;       Spill Code: 0 (instruction)


;  102	
;  103	uint8_t get_input(void) {
_get_input:
	LD	HL,-60
	CALL	__frameset
;  104	    
;  105	    char* function_menu_result;
;  106	    
;  107	    switch ((key = wait_for_any_keyup())) {
	CALL	_wait_for_any_keyup
	UEXT	HL
	LD	L,A
	LD	(_key),A
	CALL	__seqcase
L__12:
	DW	56
	DW	1
	DB	0
	DW24	L_31	

	DW24	L_33	

	DW24	L_32	

	DW24	L_30	

	DW24	L_220	

	DW24	L_220	

	DW24	L_220	

	DW24	L_220	

	DW24	L_208	

	DW24	L_139	

	DW24	L_140	

	DW24	L_145	

	DW24	L_150	

	DW24	L_77	

	DW24	L_209	

	DW24	L_220	

	DW24	L_202	

	DW24	L_171	

	DW24	L_182	

	DW24	L_197	

	DW24	L_122	

	DW24	L_106	

	DW24	L_67	

	DW24	L_220	

	DW24	L_203	

	DW24	L_166	

	DW24	L_177	

	DW24	L_192	

	DW24	L_117	

	DW24	L_100	

	DW24	L_64	

	DW24	L_56	

	DW24	L_156	

	DW24	L_161	

	DW24	L_172	

	DW24	L_187	

	DW24	L_112	

	DW24	L_94	

	DW24	L_61	

	DW24	L_46	

	DW24	L_220	

	DW24	L_214	

	DW24	L_133	

	DW24	L_127	

	DW24	L_83	

	DW24	L_89	

	DW24	L_57	

	DW24	L_39	

	DW24	L_220	

	DW24	L_28	

	DW24	L_27	

	DW24	L_26	

	DW24	L_25	

	DW24	L_34	

	DW24	L_44	

	DW24	L_45	

	DW24	L_220	

;  108	            
;  109	        case sk_Yequ:
L_25:
;  110	            function_menu_result = draw_handle_function_menu(0);
	LD	BC,0
	PUSH	BC
	CALL	_draw_handle_function_menu
	POP	BC
	LD	(IX+-3),HL
;  111	            strcat(input_buffer_left, function_menu_result);
	LD	BC,HL
	PUSH	BC
	LD	BC,_input_buffer_left
	PUSH	BC
	CALL	_strcat
	POP	BC
	POP	BC
;  112	            free(function_menu_result);
	LD	BC,(IX+-3)
	PUSH	BC
	CALL	_free
	POP	BC
;  113	            break;
	JR	L_220
;  114	        case sk_Window:
L_26:
;  115	            function_menu_result = draw_handle_function_menu(1);
	LD	BC,1
	PUSH	BC
	CALL	_draw_handle_function_menu
	POP	BC
	LD	(IX+-3),HL
;  116	            strcat(input_buffer_left, function_menu_result);
	LD	BC,HL
	PUSH	BC
	LD	BC,_input_buffer_left
	PUSH	BC
	CALL	_strcat
	POP	BC
	POP	BC
;  117	            free(function_menu_result);
	LD	BC,(IX+-3)
	PUSH	BC
	CALL	_free
	POP	BC
;  118	            break;
	JR	L_220
;  119	        case sk_Zoom:
L_27:
;  120	            function_menu_result = draw_handle_function_menu(2);
	LD	BC,2
	PUSH	BC
	CALL	_draw_handle_function_menu
	POP	BC
	LD	(IX+-3),HL
;  121	            strcat(input_buffer_left, function_menu_result);
	LD	BC,HL
	PUSH	BC
	LD	BC,_input_buffer_left
	PUSH	BC
	CALL	_strcat
	POP	BC
	POP	BC
;  122	            free(function_menu_result);
	LD	BC,(IX+-3)
	PUSH	BC
	CALL	_free
	POP	BC
;  123	            break;
	JR	L_220
;  124	        case sk_Trace:
L_28:
;  125	            function_menu_result = draw_handle_function_menu(3);
	LD	BC,3
	PUSH	BC
	CALL	_draw_handle_function_menu
	POP	BC
	LD	(IX+-3),HL
;  126	            strcat(input_buffer_left, function_menu_result);
	LD	BC,HL
	PUSH	BC
	LD	BC,_input_buffer_left
	PUSH	BC
	CALL	_strcat
	POP	BC
	POP	BC
;  127	            free(function_menu_result);
	LD	BC,(IX+-3)
	PUSH	BC
	CALL	_free
	POP	BC
;  128	            break;
	JR	L_220
;  129	        case sk_Graph: break;
;  130	            
;  131	        case sk_Up: strcat(input_buffer_left, draw_handle_history_menu(last_queries, 0)); break;
L_30:
	LD	BC,0
	PUSH	BC
	LD	BC,(_last_queries)
	PUSH	BC
	CALL	_draw_handle_history_menu
	POP	BC
	POP	BC
	PUSH	HL
	LD	BC,_input_buffer_left
	PUSH	BC
	CALL	_strcat
	POP	BC
	POP	BC
	JR	L_220
;  132	        case sk_Down: strcat(input_buffer_left, draw_handle_history_menu(last_queries, 1)); break;
L_31:
	LD	BC,1
	PUSH	BC
	LD	BC,(_last_queries)
	PUSH	BC
	CALL	_draw_handle_history_menu
	POP	BC
	POP	BC
	PUSH	HL
	LD	BC,_input_buffer_left
	PUSH	BC
	CALL	_strcat
	POP	BC
	POP	BC
	JR	L_220
;  133	        case sk_Right: shift_char(input_buffer_left, input_buffer_right, 1); break;
L_32:
	LD	BC,1
	PUSH	BC
	LD	BC,_input_buffer_right
	PUSH	BC
	LD	BC,_input_buffer_left
	PUSH	BC
	CALL	_shift_char
	POP	BC
	POP	BC
	POP	BC
	JR	L_220
;  134	        case sk_Left: shift_char(input_buffer_left, input_buffer_right, -1); break;
L_33:
	LD	BC,16777215
	PUSH	BC
	LD	BC,_input_buffer_right
	PUSH	BC
	LD	BC,_input_buffer_left
	PUSH	BC
	CALL	_shift_char
	POP	BC
	POP	BC
	POP	BC
	JR	L_220
;  135	            
;  136	        case sk_2nd:
L_34:
;  137	            second_button_pressed = !second_button_pressed;
	LD	A,(_second_button_pressed)
	OR	A,A
	JR	NZ,L_36
	LD	BC,1
	LD	(IX+-60),BC
	JR	L_37
L_36:
	LD	BC,0
	LD	(IX+-60),BC
L_37:
	LD	A,(IX+-60)
	LD	(_second_button_pressed),A
;  138	            alpha_button_pressed = false;
	XOR	A,A
	LD	(_alpha_button_pressed),A
;  139	            break;
	JR	L_220
;  140	        case sk_Alpha:
L_39:
;  141	            alpha_button_pressed = !alpha_button_pressed;
	LD	A,(_alpha_button_pressed)
	OR	A,A
	JR	NZ,L_41
	LD	BC,1
	LD	(IX+-6),BC
	JR	L_42
L_41:
	LD	BC,0
	LD	(IX+-6),BC
L_42:
	LD	A,(IX+-6)
	LD	(_alpha_button_pressed),A
;  142	            second_button_pressed = false;
	XOR	A,A
	LD	(_second_button_pressed),A
;  143	            break;
	JR	L_220
;  144	            
;  145	        case sk_Mode: draw_handle_mode_menu(); break;
L_44:
	CALL	_draw_handle_mode_menu
	JR	L_220
;  146	        case sk_Del: input_buffer_left[strlen(input_buffer_left) - 1] = '\0'; break;
L_45:
	LD	BC,_input_buffer_left
	PUSH	BC
	CALL	_strlen
	POP	BC
	DEC	HL
	LD	BC,_input_buffer_left
	ADD	HL,BC
	LD	(HL),0
	JR	L_220
;  147	        case sk_GraphVar:
L_46:
;  148	            if (var1_position != -1) input_buffer_left[strlen(input_buffer_left) - 1] = '\0';
	LD	A,(_var1_position)
	CP	A,-1
	JR	Z,L_48
	LD	BC,_input_buffer_left
	PUSH	BC
	CALL	_strlen
	POP	BC
	DEC	HL
	LD	BC,_input_buffer_left
	ADD	HL,BC
	LD	(HL),0
L_48:
;  149	            var1_position = (var1_position + 1) % 6;
	LD	A,(_var1_position)
	LD	B,A
	SEXT	HL
	LD	L,B
	INC	HL
	LD	BC,6
	CALL	__irems
	LD	A,L
	LD	(_var1_position),A
;  150	            switch (var1_position) {
	LD	B,A
	SEXT	HL
	LD	L,B
	CALL	__seqcase
L__16:
	DW	6
	DW	0
	DB	0
	DW24	L_49	

	DW24	L_50	

	DW24	L_51	

	DW24	L_52	

	DW24	L_53	

	DW24	L_54	

	DW24	L_220	

;  151	                case 0: strcat(input_buffer_left, "x"); break;
L_49:
	LD	BC,L__17
	PUSH	BC
	LD	BC,_input_buffer_left
	PUSH	BC
	CALL	_strcat
	POP	BC
	POP	BC
	JR	L_220
;  152	                case 1: strcat(input_buffer_left, "y"); break;
L_50:
	LD	BC,L__18
	PUSH	BC
	LD	BC,_input_buffer_left
	PUSH	BC
	CALL	_strcat
	POP	BC
	POP	BC
	JR	L_220
;  153	                case 2: strcat(input_buffer_left, "z"); break;
L_51:
	LD	BC,L__19
	PUSH	BC
	LD	BC,_input_buffer_left
	PUSH	BC
	CALL	_strcat
	POP	BC
	POP	BC
	JR	L_220
;  154	                case 3: strcat(input_buffer_left, "a"); break;
L_52:
	LD	BC,L__20
	PUSH	BC
	LD	BC,_input_buffer_left
	PUSH	BC
	CALL	_strcat
	POP	BC
	POP	BC
	JR	L_220
;  155	                case 4: strcat(input_buffer_left, "b"); break;
L_53:
	LD	BC,L__21
	PUSH	BC
	LD	BC,_input_buffer_left
	PUSH	BC
	CALL	_strcat
	POP	BC
	POP	BC
	JR	L_220
;  156	                case 5: strcat(input_buffer_left, "c"); break;
L_54:
	LD	BC,L__22
	PUSH	BC
	LD	BC,_input_buffer_left
	PUSH	BC
	CALL	_strcat
	POP	BC
	POP	BC
	JR	L_220
;  157	            }
;  158	            break;
;  159	        case sk_Stat: strcat(input_buffer_left, "Ls("); break;
L_56:
	LD	BC,L__23
	PUSH	BC
	LD	BC,_input_buffer_left
	PUSH	BC
	CALL	_strcat
	POP	BC
	POP	BC
	JR	L_220
;  160	            
;  161	        case sk_Math:
L_57:
;  162	            if (alpha_button_pressed) {
	LD	A,(_alpha_button_pressed)
	OR	A,A
	JR	Z,L_59
;  163	                strcat(input_buffer_left, "a"); break;
	LD	BC,L__25
	PUSH	BC
	LD	BC,_input_buffer_left
	PUSH	BC
	CALL	_strcat
	POP	BC
	POP	BC
	JR	L_220
;  164	            } else {
L_59:
;  165	                function_menu_result = draw_handle_function_menu(0);
	LD	BC,0
	PUSH	BC
	CALL	_draw_handle_function_menu
	POP	BC
	LD	(IX+-3),HL
;  166	                strcat(input_buffer_left, function_menu_result);
	LD	BC,HL
	PUSH	BC
	LD	BC,_input_buffer_left
	PUSH	BC
	CALL	_strcat
	POP	BC
	POP	BC
;  167	                free(function_menu_result);
	LD	BC,(IX+-3)
	PUSH	BC
	CALL	_free
	POP	BC
;  168	            }
;  169	            break;
	JR	L_220
;  170	        case sk_Apps: if (alpha_button_pressed) strcat(input_buffer_left, "b"); break;
L_61:
	LD	A,(_alpha_button_pressed)
	OR	A,A
	JR	Z,L_220
	LD	BC,L__27
	PUSH	BC
	LD	BC,_input_buffer_left
	PUSH	BC
	CALL	_strcat
	POP	BC
	POP	BC
	JR	L_220
;  171	        case sk_Prgm: if (alpha_button_pressed) strcat(input_buffer_left, "c"); break;
L_64:
	LD	A,(_alpha_button_pressed)
	OR	A,A
	JR	Z,L_220
	LD	BC,L__29
	PUSH	BC
	LD	BC,_input_buffer_left
	PUSH	BC
	CALL	_strcat
	POP	BC
	POP	BC
	JR	L_220
;  172	        case sk_Vars:
L_67:
;  173	            if (var2_position != -1) input_buffer_left[strlen(input_buffer_left) - 1] = '\0';
	LD	A,(_var2_position)
	CP	A,-1
	JR	Z,L_69
	LD	BC,_input_buffer_left
	PUSH	BC
	CALL	_strlen
	POP	BC
	DEC	HL
	LD	BC,_input_buffer_left
	ADD	HL,BC
	LD	(HL),0
L_69:
;  174	            var2_position = (var2_position + 1) % 6;
	LD	A,(_var2_position)
	LD	B,A
	SEXT	HL
	LD	L,B
	INC	HL
	LD	BC,6
	CALL	__irems
	LD	A,L
	LD	(_var2_position),A
;  175	            switch (var2_position) {
	LD	B,A
	SEXT	HL
	LD	L,B
	CALL	__seqcase
L__31:
	DW	6
	DW	0
	DB	0
	DW24	L_70	

	DW24	L_71	

	DW24	L_72	

	DW24	L_73	

	DW24	L_74	

	DW24	L_75	

	DW24	L_220	

;  176	                case 0: strcat(input_buffer_left, "X"); break;
L_70:
	LD	BC,L__32
	PUSH	BC
	LD	BC,_input_buffer_left
	PUSH	BC
	CALL	_strcat
	POP	BC
	POP	BC
	JR	L_220
;  177	                case 1: strcat(input_buffer_left, "Y"); break;
L_71:
	LD	BC,L__33
	PUSH	BC
	LD	BC,_input_buffer_left
	PUSH	BC
	CALL	_strcat
	POP	BC
	POP	BC
	JR	L_220
;  178	                case 2: strcat(input_buffer_left, "Z"); break;
L_72:
	LD	BC,L__34
	PUSH	BC
	LD	BC,_input_buffer_left
	PUSH	BC
	CALL	_strcat
	POP	BC
	POP	BC
	JR	L_220
;  179	                case 3: strcat(input_buffer_left, "A"); break;
L_73:
	LD	BC,L__35
	PUSH	BC
	LD	BC,_input_buffer_left
	PUSH	BC
	CALL	_strcat
	POP	BC
	POP	BC
	JR	L_220
;  180	                case 4: strcat(input_buffer_left, "B"); break;
L_74:
	LD	BC,L__36
	PUSH	BC
	LD	BC,_input_buffer_left
	PUSH	BC
	CALL	_strcat
	POP	BC
	POP	BC
	JR	L_220
;  181	                case 5: strcat(input_buffer_left, "C"); break;
L_75:
	LD	BC,L__37
	PUSH	BC
	LD	BC,_input_buffer_left
	PUSH	BC
	CALL	_strcat
	POP	BC
	POP	BC
	JR	L_220
;  182	            }
;  183	            break;
;  184	            
;  185	        case sk_Power:
L_77:
;  186	            if (second_button_pressed) {
	LD	A,(_second_button_pressed)
	OR	A,A
	JR	Z,L_81
;  187	                strcat(input_buffer_left, "pi");
	LD	BC,L__39
	PUSH	BC
	LD	BC,_input_buffer_left
	PUSH	BC
	CALL	_strcat
	POP	BC
	POP	BC
;  188	            } else if (alpha_button_pressed) {
	JR	L_220
L_81:
	LD	A,(_alpha_button_pressed)
	OR	A,A
	JR	Z,L_79
;  189	                strcat(input_buffer_left, "h");
	LD	BC,L__41
	PUSH	BC
	LD	BC,_input_buffer_left
	PUSH	BC
	CALL	_strcat
	POP	BC
	POP	BC
;  190	            } else {
	JR	L_220
L_79:
;  191	                strcat(input_buffer_left, "^");
	LD	BC,L__42
	PUSH	BC
	LD	BC,_input_buffer_left
	PUSH	BC
	CALL	_strcat
	POP	BC
	POP	BC
;  192	            }
;  193	            break;
	JR	L_220
;  194	        case sk_Square:
L_83:
;  195	            if (second_button_pressed) {
	LD	A,(_second_button_pressed)
	OR	A,A
	JR	Z,L_87
;  196	                strcat(input_buffer_left, "^(1/2)");
	LD	BC,L__44
	PUSH	BC
	LD	BC,_input_buffer_left
	PUSH	BC
	CALL	_strcat
	POP	BC
	POP	BC
;  197	            } else if (alpha_button_pressed) {
	JR	L_220
L_87:
	LD	A,(_alpha_button_pressed)
	OR	A,A
	JR	Z,L_85
;  198	                strcat(input_buffer_left, "i");
	LD	BC,L__46
	PUSH	BC
	LD	BC,_input_buffer_left
	PUSH	BC
	CALL	_strcat
	POP	BC
	POP	BC
;  199	            } else {
	JR	L_220
L_85:
;  200	                strcat(input_buffer_left, "^2");
	LD	BC,L__47
	PUSH	BC
	LD	BC,_input_buffer_left
	PUSH	BC
	CALL	_strcat
	POP	BC
	POP	BC
;  201	            }
;  202	            break;
	JR	L_220
;  203	        case sk_Recip: strcat(input_buffer_left, (alpha_button_pressed) ? "d" : "^(-1)"); break;
L_89:
	LD	A,(_alpha_button_pressed)
	OR	A,A
	JR	Z,L_92
	LD	BC,L__49
	LD	(IX+-9),BC
	JR	L_93
L_92:
	LD	BC,L__50
	LD	(IX+-9),BC
L_93:
	LD	BC,(IX+-9)
	PUSH	BC
	LD	BC,_input_buffer_left
	PUSH	BC
	CALL	_strcat
	POP	BC
	POP	BC
	JR	L_220
;  204	            
;  205	        case sk_Sin:
L_94:
;  206	            if (second_button_pressed) {
	LD	A,(_second_button_pressed)
	OR	A,A
	JR	Z,L_98
;  207	                strcat(input_buffer_left, "arcsin(");
	LD	BC,L__52
	PUSH	BC
	LD	BC,_input_buffer_left
	PUSH	BC
	CALL	_strcat
	POP	BC
	POP	BC
;  208	            } else if (alpha_button_pressed) {
	JR	L_220
L_98:
	LD	A,(_alpha_button_pressed)
	OR	A,A
	JR	Z,L_96
;  209	                strcat(input_buffer_left, "e");
	LD	BC,L__54
	PUSH	BC
	LD	BC,_input_buffer_left
	PUSH	BC
	CALL	_strcat
	POP	BC
	POP	BC
;  210	            } else {
	JR	L_220
L_96:
;  211	                strcat(input_buffer_left, "sin(");
	LD	BC,L__55
	PUSH	BC
	LD	BC,_input_buffer_left
	PUSH	BC
	CALL	_strcat
	POP	BC
	POP	BC
;  212	            }
;  213	            break;
	JR	L_220
;  214	        case sk_Cos:
L_100:
;  215	            if (second_button_pressed) {
	LD	A,(_second_button_pressed)
	OR	A,A
	JR	Z,L_104
;  216	                strcat(input_buffer_left, "arccos(");
	LD	BC,L__57
	PUSH	BC
	LD	BC,_input_buffer_left
	PUSH	BC
	CALL	_strcat
	POP	BC
	POP	BC
;  217	            } else if (alpha_button_pressed) {
	JR	L_220
L_104:
	LD	A,(_alpha_button_pressed)
	OR	A,A
	JR	Z,L_102
;  218	                strcat(input_buffer_left, "f");
	LD	BC,L__59
	PUSH	BC
	LD	BC,_input_buffer_left
	PUSH	BC
	CALL	_strcat
	POP	BC
	POP	BC
;  219	            } else {
	JR	L_220
L_102:
;  220	                strcat(input_buffer_left, "cos(");
	LD	BC,L__60
	PUSH	BC
	LD	BC,_input_buffer_left
	PUSH	BC
	CALL	_strcat
	POP	BC
	POP	BC
;  221	            }
;  222	            break;
	JR	L_220
;  223	        case sk_Tan:
L_106:
;  224	            if (second_button_pressed) {
	LD	A,(_second_button_pressed)
	OR	A,A
	JR	Z,L_110
;  225	                strcat(input_buffer_left, "arctan(");
	LD	BC,L__62
	PUSH	BC
	LD	BC,_input_buffer_left
	PUSH	BC
	CALL	_strcat
	POP	BC
	POP	BC
;  226	            } else if (alpha_button_pressed) {
	JR	L_220
L_110:
	LD	A,(_alpha_button_pressed)
	OR	A,A
	JR	Z,L_108
;  227	                strcat(input_buffer_left, "g");
	LD	BC,L__64
	PUSH	BC
	LD	BC,_input_buffer_left
	PUSH	BC
	CALL	_strcat
	POP	BC
	POP	BC
;  228	            } else {
	JR	L_220
L_108:
;  229	                strcat(input_buffer_left, "tan(");
	LD	BC,L__65
	PUSH	BC
	LD	BC,_input_buffer_left
	PUSH	BC
	CALL	_strcat
	POP	BC
	POP	BC
;  230	            }
;  231	            break;
	JR	L_220
;  232	            
;  233	        case sk_Comma: strcat(input_buffer_left, (alpha_button_pressed) ? "j" : ","); break;
L_112:
	LD	A,(_alpha_button_pressed)
	OR	A,A
	JR	Z,L_115
	LD	BC,L__67
	LD	(IX+-12),BC
	JR	L_116
L_115:
	LD	BC,L__68
	LD	(IX+-12),BC
L_116:
	LD	BC,(IX+-12)
	PUSH	BC
	LD	BC,_input_buffer_left
	PUSH	BC
	CALL	_strcat
	POP	BC
	POP	BC
	JR	L_220
;  234	        case sk_LParen: strcat(input_buffer_left, (alpha_button_pressed) ? "k" : "("); break;
L_117:
	LD	A,(_alpha_button_pressed)
	OR	A,A
	JR	Z,L_120
	LD	BC,L__70
	LD	(IX+-15),BC
	JR	L_121
L_120:
	LD	BC,L__71
	LD	(IX+-15),BC
L_121:
	LD	BC,(IX+-15)
	PUSH	BC
	LD	BC,_input_buffer_left
	PUSH	BC
	CALL	_strcat
	POP	BC
	POP	BC
	JR	L_220
;  235	        case sk_RParen: strcat(input_buffer_left, (alpha_button_pressed) ? "l" : ")"); break;
L_122:
	LD	A,(_alpha_button_pressed)
	OR	A,A
	JR	Z,L_125
	LD	BC,L__73
	LD	(IX+-18),BC
	JR	L_126
L_125:
	LD	BC,L__74
	LD	(IX+-18),BC
L_126:
	LD	BC,(IX+-18)
	PUSH	BC
	LD	BC,_input_buffer_left
	PUSH	BC
	CALL	_strcat
	POP	BC
	POP	BC
	JR	L_220
;  236	            
;  237	        case sk_Log:
L_127:
;  238	            if (second_button_pressed) {
	LD	A,(_second_button_pressed)
	OR	A,A
	JR	Z,L_131
;  239	                strcat(input_buffer_left, "10^");
	LD	BC,L__76
	PUSH	BC
	LD	BC,_input_buffer_left
	PUSH	BC
	CALL	_strcat
	POP	BC
	POP	BC
;  240	            } else if (alpha_button_pressed) {
	JR	L_220
L_131:
	LD	A,(_alpha_button_pressed)
	OR	A,A
	JR	Z,L_129
;  241	                strcat(input_buffer_left, "n");
	LD	BC,L__78
	PUSH	BC
	LD	BC,_input_buffer_left
	PUSH	BC
	CALL	_strcat
	POP	BC
	POP	BC
;  242	            } else {
	JR	L_220
L_129:
;  243	                strcat(input_buffer_left, "log(");
	LD	BC,L__79
	PUSH	BC
	LD	BC,_input_buffer_left
	PUSH	BC
	CALL	_strcat
	POP	BC
	POP	BC
;  244	            }
;  245	            break;
	JR	L_220
;  246	        case sk_Ln:
L_133:
;  247	            if (second_button_pressed) {
	LD	A,(_second_button_pressed)
	OR	A,A
	JR	Z,L_137
;  248	                strcat(input_buffer_left, "e^");
	LD	BC,L__81
	PUSH	BC
	LD	BC,_input_buffer_left
	PUSH	BC
	CALL	_strcat
	POP	BC
	POP	BC
;  249	            } else if (alpha_button_pressed) {
	JR	L_220
L_137:
	LD	A,(_alpha_button_pressed)
	OR	A,A
	JR	Z,L_135
;  250	                strcat(input_buffer_left, "s");
	LD	BC,L__83
	PUSH	BC
	LD	BC,_input_buffer_left
	PUSH	BC
	CALL	_strcat
	POP	BC
	POP	BC
;  251	            } else {
	JR	L_220
L_135:
;  252	                strcat(input_buffer_left, "ln(");
	LD	BC,L__84
	PUSH	BC
	LD	BC,_input_buffer_left
	PUSH	BC
	CALL	_strcat
	POP	BC
	POP	BC
;  253	            }
;  254	            break;
	JR	L_220
;  255	            
;  256	        case sk_Add: strcat(input_buffer_left, "+"); break;
L_139:
	LD	BC,L__85
	PUSH	BC
	LD	BC,_input_buffer_left
	PUSH	BC
	CALL	_strcat
	POP	BC
	POP	BC
	JR	L_220
;  257	        case sk_Sub: strcat(input_buffer_left, (alpha_button_pressed) ? "w" : "-"); break;
L_140:
	LD	A,(_alpha_button_pressed)
	OR	A,A
	JR	Z,L_143
	LD	BC,L__87
	LD	(IX+-21),BC
	JR	L_144
L_143:
	LD	BC,L__88
	LD	(IX+-21),BC
L_144:
	LD	BC,(IX+-21)
	PUSH	BC
	LD	BC,_input_buffer_left
	PUSH	BC
	CALL	_strcat
	POP	BC
	POP	BC
	JR	L_220
;  258	        case sk_Mul: strcat(input_buffer_left, (alpha_button_pressed) ? "r" : "*"); break;
L_145:
	LD	A,(_alpha_button_pressed)
	OR	A,A
	JR	Z,L_148
	LD	BC,L__90
	LD	(IX+-24),BC
	JR	L_149
L_148:
	LD	BC,L__91
	LD	(IX+-24),BC
L_149:
	LD	BC,(IX+-24)
	PUSH	BC
	LD	BC,_input_buffer_left
	PUSH	BC
	CALL	_strcat
	POP	BC
	POP	BC
	JR	L_220
;  259	        case sk_Div:
L_150:
;  260	            if (second_button_pressed) {
	LD	A,(_second_button_pressed)
	OR	A,A
	JR	Z,L_154
;  261	                strcat(input_buffer_left, "e");
	LD	BC,L__93
	PUSH	BC
	LD	BC,_input_buffer_left
	PUSH	BC
	CALL	_strcat
	POP	BC
	POP	BC
;  262	            } else if (alpha_button_pressed) {
	JR	L_220
L_154:
	LD	A,(_alpha_button_pressed)
	OR	A,A
	JR	Z,L_152
;  263	                strcat(input_buffer_left, "m");
	LD	BC,L__95
	PUSH	BC
	LD	BC,_input_buffer_left
	PUSH	BC
	CALL	_strcat
	POP	BC
	POP	BC
;  264	            } else {
	JR	L_220
L_152:
;  265	                strcat(input_buffer_left, "/");
	LD	BC,L__96
	PUSH	BC
	LD	BC,_input_buffer_left
	PUSH	BC
	CALL	_strcat
	POP	BC
	POP	BC
;  266	            }
;  267	            break;
	JR	L_220
;  268	            
;  269	        case sk_0: strcat(input_buffer_left, (alpha_button_pressed) ? " " : "0"); break;
L_156:
	LD	A,(_alpha_button_pressed)
	OR	A,A
	JR	Z,L_159
	LD	BC,L__98
	LD	(IX+-27),BC
	JR	L_160
L_159:
	LD	BC,L__99
	LD	(IX+-27),BC
L_160:
	LD	BC,(IX+-27)
	PUSH	BC
	LD	BC,_input_buffer_left
	PUSH	BC
	CALL	_strcat
	POP	BC
	POP	BC
	JR	L_220
;  270	        case sk_1: strcat(input_buffer_left, (alpha_button_pressed) ? "y" : "1"); break;
L_161:
	LD	A,(_alpha_button_pressed)
	OR	A,A
	JR	Z,L_164
	LD	BC,L__101
	LD	(IX+-30),BC
	JR	L_165
L_164:
	LD	BC,L__102
	LD	(IX+-30),BC
L_165:
	LD	BC,(IX+-30)
	PUSH	BC
	LD	BC,_input_buffer_left
	PUSH	BC
	CALL	_strcat
	POP	BC
	POP	BC
	JR	L_220
;  271	        case sk_2: strcat(input_buffer_left, (alpha_button_pressed) ? "z" : "2"); break;
L_166:
	LD	A,(_alpha_button_pressed)
	OR	A,A
	JR	Z,L_169
	LD	BC,L__104
	LD	(IX+-33),BC
	JR	L_170
L_169:
	LD	BC,L__105
	LD	(IX+-33),BC
L_170:
	LD	BC,(IX+-33)
	PUSH	BC
	LD	BC,_input_buffer_left
	PUSH	BC
	CALL	_strcat
	POP	BC
	POP	BC
	JR	L_220
;  272	        case sk_3: strcat(input_buffer_left, "3"); break;
L_171:
	LD	BC,L__106
	PUSH	BC
	LD	BC,_input_buffer_left
	PUSH	BC
	CALL	_strcat
	POP	BC
	POP	BC
	JR	L_220
;  273	        case sk_4: strcat(input_buffer_left, (alpha_button_pressed) ? "t" : "4"); break;
L_172:
	LD	A,(_alpha_button_pressed)
	OR	A,A
	JR	Z,L_175
	LD	BC,L__108
	LD	(IX+-36),BC
	JR	L_176
L_175:
	LD	BC,L__109
	LD	(IX+-36),BC
L_176:
	LD	BC,(IX+-36)
	PUSH	BC
	LD	BC,_input_buffer_left
	PUSH	BC
	CALL	_strcat
	POP	BC
	POP	BC
	JR	L_220
;  274	        case sk_5: strcat(input_buffer_left, (alpha_button_pressed) ? "u" : "5"); break;
L_177:
	LD	A,(_alpha_button_pressed)
	OR	A,A
	JR	Z,L_180
	LD	BC,L__111
	LD	(IX+-39),BC
	JR	L_181
L_180:
	LD	BC,L__112
	LD	(IX+-39),BC
L_181:
	LD	BC,(IX+-39)
	PUSH	BC
	LD	BC,_input_buffer_left
	PUSH	BC
	CALL	_strcat
	POP	BC
	POP	BC
	JR	L_220
;  275	        case sk_6: strcat(input_buffer_left, (alpha_button_pressed) ? "v" : "6"); break;
L_182:
	LD	A,(_alpha_button_pressed)
	OR	A,A
	JR	Z,L_185
	LD	BC,L__114
	LD	(IX+-42),BC
	JR	L_186
L_185:
	LD	BC,L__115
	LD	(IX+-42),BC
L_186:
	LD	BC,(IX+-42)
	PUSH	BC
	LD	BC,_input_buffer_left
	PUSH	BC
	CALL	_strcat
	POP	BC
	POP	BC
	JR	L_220
;  276	        case sk_7: strcat(input_buffer_left, (alpha_button_pressed) ? "o" : "7"); break;
L_187:
	LD	A,(_alpha_button_pressed)
	OR	A,A
	JR	Z,L_190
	LD	BC,L__117
	LD	(IX+-45),BC
	JR	L_191
L_190:
	LD	BC,L__118
	LD	(IX+-45),BC
L_191:
	LD	BC,(IX+-45)
	PUSH	BC
	LD	BC,_input_buffer_left
	PUSH	BC
	CALL	_strcat
	POP	BC
	POP	BC
	JR	L_220
;  277	        case sk_8: strcat(input_buffer_left, (alpha_button_pressed) ? "p" : "8"); break;
L_192:
	LD	A,(_alpha_button_pressed)
	OR	A,A
	JR	Z,L_195
	LD	BC,L__120
	LD	(IX+-48),BC
	JR	L_196
L_195:
	LD	BC,L__121
	LD	(IX+-48),BC
L_196:
	LD	BC,(IX+-48)
	PUSH	BC
	LD	BC,_input_buffer_left
	PUSH	BC
	CALL	_strcat
	POP	BC
	POP	BC
	JR	L_220
;  278	        case sk_9: strcat(input_buffer_left, (alpha_button_pressed) ? "q" : "9"); break;
L_197:
	LD	A,(_alpha_button_pressed)
	OR	A,A
	JR	Z,L_200
	LD	BC,L__123
	LD	(IX+-51),BC
	JR	L_201
L_200:
	LD	BC,L__124
	LD	(IX+-51),BC
L_201:
	LD	BC,(IX+-51)
	PUSH	BC
	LD	BC,_input_buffer_left
	PUSH	BC
	CALL	_strcat
	POP	BC
	POP	BC
	JR	L_220
;  279	            
;  280	        case sk_Chs: strcat(input_buffer_left, "-"); break;
L_202:
	LD	BC,L__125
	PUSH	BC
	LD	BC,_input_buffer_left
	PUSH	BC
	CALL	_strcat
	POP	BC
	POP	BC
	JR	L_220
;  281	        case sk_DecPnt: strcat(input_buffer_left, (second_button_pressed) ? "i" : "."); break;
L_203:
	LD	A,(_second_button_pressed)
	OR	A,A
	JR	Z,L_206
	LD	BC,L__127
	LD	(IX+-54),BC
	JR	L_207
L_206:
	LD	BC,L__128
	LD	(IX+-54),BC
L_207:
	LD	BC,(IX+-54)
	PUSH	BC
	LD	BC,_input_buffer_left
	PUSH	BC
	CALL	_strcat
	POP	BC
	POP	BC
	JR	L_220
;  282	            
;  283	        case sk_Enter: return RETS_SUCCESS; break;
L_208:
	LD	A,2
	JR	L_228
;  284	        case sk_Clear:
L_209:
;  285	            if (strlen(input_buffer_left) == 0 && strlen(input_buffer_right) == 0) {
	LD	BC,_input_buffer_left
	PUSH	BC
	CALL	_strlen
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_212
	LD	BC,_input_buffer_right
	PUSH	BC
	CALL	_strlen
	POP	BC
	CALL	__icmpzero
	JR	NZ,L_212
;  286	                return RETS_ERROR;
	LD	A,1
	JR	L_228
;  287	            } else {
L_212:
;  288	                memset(input_buffer_left, 0, INPUT_BUFFER_SIZE);
	LD	BC,150
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	BC,_input_buffer_left
	PUSH	BC
	CALL	_memset
	POP	BC
	POP	BC
	POP	BC
;  289	                memset(input_buffer_right, 0, INPUT_BUFFER_SIZE);
	LD	BC,150
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	BC,_input_buffer_right
	PUSH	BC
	CALL	_memset
	POP	BC
	POP	BC
	POP	BC
;  290	            }
;  291	            break;
	JR	L_220
;  292	        case sk_Store: strcat(input_buffer_left, (alpha_button_pressed) ? "x" : "="); break;
L_214:
	LD	A,(_alpha_button_pressed)
	OR	A,A
	JR	Z,L_217
	LD	BC,L__132
	LD	(IX+-57),BC
	JR	L_218
L_217:
	LD	BC,L__133
	LD	(IX+-57),BC
L_218:
	LD	BC,(IX+-57)
	PUSH	BC
	LD	BC,_input_buffer_left
	PUSH	BC
	CALL	_strcat
	POP	BC
	POP	BC
;  293	            
;  294	    }
L_220:
;  295	    
;  296	    if (key != sk_GraphVar) {
	LD	A,(_key)
	CP	A,40
	JR	Z,L_222
;  297	        var1_position = -1;
	LD	A,255
	LD	(_var1_position),A
;  298	    }
L_222:
;  299	    
;  300	    if (key != sk_Vars) {
	LD	A,(_key)
	CP	A,23
	JR	Z,L_224
;  301	        var2_position = -1;
	LD	A,255
	LD	(_var2_position),A
;  302	    }
L_224:
;  303	    
;  304	    if (key != sk_2nd) {
	LD	A,(_key)
	CP	A,54
	JR	Z,L_226
;  305	        second_button_pressed = false;
	XOR	A,A
	LD	(_second_button_pressed),A
;  306	    }
L_226:
;  307	    
;  308	    if (key != sk_Alpha) {
	LD	A,(_key)
	CP	A,48
	JR	Z,L_227
;  309	        alpha_button_pressed = false;
	XOR	A,A
	LD	(_alpha_button_pressed),A
;  310	    }
L_227:
;  311	    
;  312	    return RETS_CHANGED;
	LD	A,3
;  313	    
;  314	}
L_228:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _get_input ***************************
;Name                         Addr/Register   Size   Type
;_memset                             IMPORT  -----   function
;_var2_position                      STATIC      1   variable
;_var1_position                      STATIC      1   variable
;_strlen                             IMPORT  -----   function
;_draw_handle_mode_menu              IMPORT  -----   function
;_alpha_button_pressed               STATIC      1   variable
;_second_button_pressed              STATIC      1   variable
;_input_buffer_right                 STATIC    150   variable
;_last_queries                       STATIC      3   variable
;_draw_handle_history_menu           IMPORT  -----   function
;_free                               IMPORT  -----   function
;_input_buffer_left                  STATIC    150   variable
;_strcat                             IMPORT  -----   function
;_draw_handle_function_menu          IMPORT  -----   function
;_key                                STATIC      1   variable
;_wait_for_any_keyup                 IMPORT  -----   function
;temp38                               IX-60      3   variable
;temp215                              IX-57      3   variable
;temp204                              IX-54      3   variable
;temp198                              IX-51      3   variable
;temp193                              IX-48      3   variable
;temp188                              IX-45      3   variable
;temp183                              IX-42      3   variable
;temp178                              IX-39      3   variable
;temp173                              IX-36      3   variable
;temp167                              IX-33      3   variable
;temp162                              IX-30      3   variable
;temp157                              IX-27      3   variable
;temp146                              IX-24      3   variable
;temp141                              IX-21      3   variable
;temp123                              IX-18      3   variable
;temp118                              IX-15      3   variable
;temp113                              IX-12      3   variable
;temp90                                IX-9      3   variable
;temp43                                IX-6      3   variable
;function_menu_result                  IX-3      3   variable


; Stack Frame Size: 66 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__17:
	DB	"x"
	DB	0
L__18:
	DB	"y"
	DB	0
L__19:
	DB	"z"
	DB	0
L__20:
	DB	"a"
	DB	0
L__21:
	DB	"b"
	DB	0
L__22:
	DB	"c"
	DB	0
L__23:
	DB	"Ls("
	DB	0
L__25:
	DB	"a"
	DB	0
L__27:
	DB	"b"
	DB	0
L__29:
	DB	"c"
	DB	0
L__32:
	DB	"X"
	DB	0
L__33:
	DB	"Y"
	DB	0
L__34:
	DB	"Z"
	DB	0
L__35:
	DB	"A"
	DB	0
L__36:
	DB	"B"
	DB	0
L__37:
	DB	"C"
	DB	0
L__39:
	DB	"pi"
	DB	0
L__41:
	DB	"h"
	DB	0
L__42:
	DB	"^"
	DB	0
L__44:
	DB	"^(1/2)"
	DB	0
L__46:
	DB	"i"
	DB	0
L__47:
	DB	"^2"
	DB	0
L__49:
	DB	"d"
	DB	0
L__50:
	DB	"^(-1)"
	DB	0
L__52:
	DB	"arcsin("
	DB	0
L__54:
	DB	"e"
	DB	0
L__55:
	DB	"sin("
	DB	0
L__57:
	DB	"arccos("
	DB	0
L__59:
	DB	"f"
	DB	0
L__60:
	DB	"cos("
	DB	0
L__62:
	DB	"arctan("
	DB	0
L__64:
	DB	"g"
	DB	0
L__65:
	DB	"tan("
	DB	0
L__67:
	DB	"j"
	DB	0
L__68:
	DB	","
	DB	0
L__70:
	DB	"k"
	DB	0
L__71:
	DB	"("
	DB	0
L__73:
	DB	"l"
	DB	0
L__74:
	DB	")"
	DB	0
L__76:
	DB	"10^"
	DB	0
L__78:
	DB	"n"
	DB	0
L__79:
	DB	"log("
	DB	0
L__81:
	DB	"e^"
	DB	0
L__83:
	DB	"s"
	DB	0
L__84:
	DB	"ln("
	DB	0
L__85:
	DB	"+"
	DB	0
L__87:
	DB	"w"
	DB	0
L__88:
	DB	"-"
	DB	0
L__90:
	DB	"r"
	DB	0
L__91:
	DB	"*"
	DB	0
L__93:
	DB	"e"
	DB	0
L__95:
	DB	"m"
	DB	0
L__96:
	DB	"/"
	DB	0
L__98:
	DB	" "
	DB	0
L__99:
	DB	"0"
	DB	0
L__101:
	DB	"y"
	DB	0
L__102:
	DB	"1"
	DB	0
L__104:
	DB	"z"
	DB	0
L__105:
	DB	"2"
	DB	0
L__106:
	DB	"3"
	DB	0
L__108:
	DB	"t"
	DB	0
L__109:
	DB	"4"
	DB	0
L__111:
	DB	"u"
	DB	0
L__112:
	DB	"5"
	DB	0
L__114:
	DB	"v"
	DB	0
L__115:
	DB	"6"
	DB	0
L__117:
	DB	"o"
	DB	0
L__118:
	DB	"7"
	DB	0
L__120:
	DB	"p"
	DB	0
L__121:
	DB	"8"
	DB	0
L__123:
	DB	"q"
	DB	0
L__124:
	DB	"9"
	DB	0
L__125:
	DB	"-"
	DB	0
L__127:
	DB	"i"
	DB	0
L__128:
	DB	"."
	DB	0
L__132:
	DB	"x"
	DB	0
L__133:
	DB	"="
	DB	0
	SEGMENT CODE
;  315	
;  316	uint8_t handle_draw_input(void) {
_handle_draw_input:
	LD	HL,-604
	CALL	__frameset
;  317	    
;  318	    bool is_running = true;
	LD	(IX+-4),1
;  319	    char input_buffer[2 * INPUT_BUFFER_SIZE];
;  320	    char result[2 * INPUT_BUFFER_SIZE];
;  321	    return_status status = RETS_NULL;
	LD	BC,0
	LD	(IX+-3),BC
;  322	
;  323	    memset(input_buffer_left, 0, INPUT_BUFFER_SIZE);
	LD	BC,150
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	BC,_input_buffer_left
	PUSH	BC
	CALL	_memset
	POP	BC
	POP	BC
	POP	BC
;  324	    memset(input_buffer_right, 0, INPUT_BUFFER_SIZE);
	LD	BC,150
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	BC,_input_buffer_right
	PUSH	BC
	CALL	_memset
	POP	BC
	POP	BC
	POP	BC
;  325	    memset(input_buffer, 0, INPUT_BUFFER_SIZE);
	LD	BC,150
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	HL,IX
	LD	BC,-304
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	CALL	_memset
	POP	BC
	POP	BC
	POP	BC
;  326	
;  327	    last_queries = calloc(1, sizeof(history));
	LD	BC,31
	PUSH	BC
	LD	BC,1
	PUSH	BC
	CALL	_calloc
	POP	BC
	POP	BC
	LD	(_last_queries),HL
;  328	
;  329	    second_button_pressed = false;
	XOR	A,A
	LD	(_second_button_pressed),A
;  330	    alpha_button_pressed = false;
	XOR	A,A
	LD	(_alpha_button_pressed),A
;  331	
;  332	    var1_position = -1;
	LD	A,255
	LD	(_var1_position),A
;  333	    var2_position = -1;
	LD	(_var2_position),A
;  334	
;  335	    last_queries->item_count = 0;
	LD	IY,(_last_queries)
	LD	(IY+0),0
;  336	
;  337	    while (is_running) {
	JR	L_244
L_245:
;  338	
;  339	        if (status != RETS_NULL) status = get_input();
	LD	HL,(IX+-3)
	CALL	__icmpzero
	JR	Z,L_230
	CALL	_get_input
	UEXT	HL
	LD	L,A
	LD	(IX+-3),HL
L_230:
;  340	
;  341	        gfx_FillScreen(GCOL_BACKGROUND_PRIMARY);
	LD	BC,1
	PUSH	BC
	CALL	_gfx_FillScreen
	POP	BC
;  342	        draw_header("symbolic3", "", "Computer Algebra");
	LD	BC,L__140
	PUSH	BC
	LD	BC,L__141
	PUSH	BC
	LD	BC,L__142
	PUSH	BC
	CALL	_draw_header
	POP	BC
	POP	BC
	POP	BC
;  343	
;  344	        gfx_SetTextXY(MARGIN, 40);
	LD	BC,40
	PUSH	BC
	LD	BC,10
	PUSH	BC
	CALL	_gfx_SetTextXY
	POP	BC
	POP	BC
;  345	        gfx_SetTextFGColor(GCOL_TEXT_PRIMARY);
	LD	BC,3
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  346	        print_character_wise(input_buffer_left);
	LD	BC,_input_buffer_left
	PUSH	BC
	CALL	_print_character_wise
	POP	BC
;  347	
;  348	        if (second_button_pressed) {
	LD	A,(_second_button_pressed)
	OR	A,A
	JR	Z,L_234
;  349	            gfx_SetTextFGColor(GCOL_BLUE);
	LD	BC,11
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  350	        } else if (alpha_button_pressed) {
	JR	L_235
L_234:
	LD	A,(_alpha_button_pressed)
	OR	A,A
	JR	Z,L_232
;  351	            gfx_SetTextFGColor(GCOL_GREEN);
	LD	BC,10
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  352	        } else {
	JR	L_235
L_232:
;  353	            gfx_SetTextFGColor(GCOL_SYMBOLIC3);
	LD	BC,12
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  354	        }
L_235:
;  355	
;  356	        print_character_wise(" | ");
	LD	BC,L__145
	PUSH	BC
	CALL	_print_character_wise
	POP	BC
;  357	
;  358	        gfx_SetTextFGColor(GCOL_TEXT_PRIMARY);
	LD	BC,3
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  359	        print_character_wise(input_buffer_right);
	LD	BC,_input_buffer_right
	PUSH	BC
	CALL	_print_character_wise
	POP	BC
;  360	
;  361	        if (status == RETS_SUCCESS && (strlen(input_buffer_left) > 0 || strlen(input_buffer_right) > 0)) {
	LD	HL,(IX+-3)
	LD	BC,2
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_242
	LD	BC,_input_buffer_left
	PUSH	BC
	CALL	_strlen
	POP	BC
	LD	BC,HL
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	JR	C,L_241
	LD	BC,_input_buffer_right
	PUSH	BC
	CALL	_strlen
	POP	BC
	LD	BC,HL
	OR	A,A
	SBC	HL,HL
	OR	A,A
	SBC	HL,BC
	JR	NC,L_242
L_241:
;  362	            
;  363	            memset(input_buffer, 0, 2 * INPUT_BUFFER_SIZE);
	LD	BC,300
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	HL,IX
	LD	BC,-304
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	CALL	_memset
	POP	BC
	POP	BC
	POP	BC
;  364	            strcat(input_buffer, input_buffer_left);
	LD	BC,_input_buffer_left
	PUSH	BC
	LD	HL,IX
	LD	BC,-304
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	CALL	_strcat
	POP	BC
	POP	BC
;  365	            strcat(input_buffer, input_buffer_right);
	LD	BC,_input_buffer_right
	PUSH	BC
	LD	HL,IX
	LD	BC,-304
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	CALL	_strcat
	POP	BC
	POP	BC
;  366	            
;  367	            memset(result, 0, 2 * INPUT_BUFFER_SIZE);
	LD	BC,300
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	HL,IX
	LD	BC,-604
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	CALL	_memset
	POP	BC
	POP	BC
	POP	BC
;  368	            
;  369	            if (symbolic4(result, input_buffer) == RETS_SUCCESS) {
	LD	HL,IX
	LD	BC,-304
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	HL,IX
	LD	BC,-604
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	CALL	_symbolic4
	POP	BC
	POP	BC
	UEXT	HL
	LD	L,A
	OR	A,A
	LD	BC,2
	SBC	HL,BC
	JR	NZ,L_239
;  370	                gfx_SetTextXY(MARGIN, gfx_GetTextY() + 20);
	CALL	_gfx_GetTextY
	LD	IY,HL
	LEA	BC,IY+20
	PUSH	BC
	LD	BC,10
	PUSH	BC
	CALL	_gfx_SetTextXY
	POP	BC
	POP	BC
;  371	                gfx_SetTextFGColor(GCOL_SYMBOLIC3);
	LD	BC,12
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  372	                print_character_wise(result);
	LD	HL,IX
	LD	BC,-604
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	CALL	_print_character_wise
	POP	BC
;  373	                append_new_history_item(last_queries, input_buffer, result);
	LD	HL,IX
	LD	BC,-604
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	HL,IX
	LD	BC,-304
	ADD	HL,BC
	LD	BC,HL
	PUSH	BC
	LD	BC,(_last_queries)
	PUSH	BC
	CALL	_append_new_history_item
	POP	BC
	POP	BC
	POP	BC
;  374	            } else {
	JR	L_243
L_239:
;  375	                gfx_SetTextXY(MARGIN, gfx_GetTextY() + 20);
	CALL	_gfx_GetTextY
	LD	IY,HL
	LEA	BC,IY+20
	PUSH	BC
	LD	BC,10
	PUSH	BC
	CALL	_gfx_SetTextXY
	POP	BC
	POP	BC
;  376	                gfx_SetTextFGColor(GCOL_TEXT_PRIMARY);
	LD	BC,3
	PUSH	BC
	CALL	_gfx_SetTextFGColor
	POP	BC
;  377	                print_character_wise("ERROR");
	LD	BC,L__150
	PUSH	BC
	CALL	_print_character_wise
	POP	BC
;  378	            }
;  379	            
;  380	        } else if (status == RETS_ERROR) {
	JR	L_243
L_242:
	LD	BC,1
	LD	HL,(IX+-3)
	OR	A,A
	SBC	HL,BC
	JR	NZ,L_243
;  381	            is_running = false;
	LD	(IX+-4),0
;  382	        }
L_243:
;  383	
;  384	        status = RETS_CHANGED;
	LD	BC,3
	LD	(IX+-3),BC
;  385	
;  386	    }
L_244:
	LD	A,(IX+-4)
	OR	A,A
	JR	NZ,L_245
;  387	    
;  388	    return RETS_SUCCESS;
	LD	A,2
;  389	    
;  390	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _handle_draw_input ***************************
;Name                         Addr/Register   Size   Type
;_gfx_GetTextY                       IMPORT  -----   function
;_symbolic4                          IMPORT  -----   function
;_strcat                             IMPORT  -----   function
;_strlen                             IMPORT  -----   function
;_print_character_wise               IMPORT  -----   function
;_gfx_SetTextFGColor                 IMPORT  -----   function
;_gfx_SetTextXY                      IMPORT  -----   function
;_draw_header                        IMPORT  -----   function
;_gfx_FillScreen                     IMPORT  -----   function
;_get_input                          IMPORT  -----   function
;_var2_position                      STATIC      1   variable
;_var1_position                      STATIC      1   variable
;_alpha_button_pressed               STATIC      1   variable
;_second_button_pressed              STATIC      1   variable
;_last_queries                       STATIC      3   variable
;_calloc                             IMPORT  -----   function
;_input_buffer_right                 STATIC    150   variable
;_input_buffer_left                  STATIC    150   variable
;_memset                             IMPORT  -----   function
;result                              IX-604    300   variable
;input_buffer                        IX-304    300   variable
;is_running                            IX-4      1   variable
;status                                IX-3      3   variable


; Stack Frame Size: 610 (bytes)
;       Spill Code: 0 (instruction)


	SEGMENT STRSECT
L__140:
	DB	"Computer Algebra"
	DB	0
L__141:
	DB	0
L__142:
	DB	"symbolic3"
	DB	0
L__145:
	DB	" | "
	DB	0
L__150:
	DB	"ERROR"
	DB	0
	XREF _draw_handle_mode_menu:ROM
	XREF _draw_handle_history_menu:ROM
	XREF _draw_handle_function_menu:ROM
	XREF _draw_header:ROM
	XREF _print_character_wise:ROM
	XREF _wait_for_any_keyup:ROM
	XREF _gfx_SetTextFGColor:ROM
	XREF _gfx_SetTextXY:ROM
	XREF _gfx_GetTextY:ROM
	XREF _gfx_FillScreen:ROM
	XREF _symbolic4:ROM
	XREF _strlen:ROM
	XREF _strcat:ROM
	XREF _strcpy:ROM
	XREF _memmove:ROM
	XREF _memset:ROM
	XREF _free:ROM
	XREF _calloc:ROM
	XREF __irems:ROM
	XREF __frameset0:ROM
	XREF __frameset:ROM
	XREF __icmpzero:ROM
	XREF __seqcase:ROM
	XDEF _handle_draw_input
	XDEF _get_input
	XDEF _shift_char
	XDEF _append_new_history_item
	XDEF _free_history
	XDEF _free_history_item
	XDEF _new_history_item
	XDEF _selected_history_item
	XDEF _last_queries
	XDEF _var2_position
	XDEF _var1_position
	XDEF _alpha_button_pressed
	XDEF _second_button_pressed
	XDEF _input_buffer_right
	XDEF _input_buffer_left
	XDEF _key
	END
