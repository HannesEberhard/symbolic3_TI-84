; Zilog eZ80 ANSI C Compiler Release 3.4
; -optsize -noreduceopt -nomodsect -peephole -globalopt
; -localcse -const=ROM 
	FILE	"SRC\SYMBOLIC4\SRC\MATRIX.C"
	.assume ADL=1
	SEGMENT CODE
;    1	
;    2	/*
;    3	 
;    4	 Copyright (c) 2019 Hannes Eberhard
;    5	 
;    6	 Permission is hereby granted, free of charge, to any person obtaining a copy
;    7	 of this software and associated documentation files (the "Software"), to deal
;    8	 in the Software without restriction, including without limitation the rights
;    9	 to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
;   10	 copies of the Software, and to permit persons to whom the Software is
;   11	 furnished to do so, subject to the following conditions:
;   12	 
;   13	 The above copyright notice and this permission notice shall be included in all
;   14	 copies or substantial portions of the Software.
;   15	 
;   16	 THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
;   17	 IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
;   18	 FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
;   19	 AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
;   20	 LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
;   21	 OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
;   22	 SOFTWARE.
;   23	 
;   24	 */
;   25	
;   26	#include "symbolic4.h"
;   27	
;   28	expression* new_matrix(uint8_t rows, uint8_t colums) {
_new_matrix:
	LD	HL,-5
	CALL	__frameset
;   29	    
;   30	    uint8_t i, j;
;   31	    expression* result = new_expression(EXPT_STRUCTURE, EXPI_MATRIX, 0);
	LD	BC,0
	PUSH	BC
	LD	BC,41
	PUSH	BC
	LD	BC,4
	PUSH	BC
	CALL	_new_expression
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-5),HL
;   32	    
;   33	    for (i = 0; i < rows; i++) {
	LD	(IX+-1),0
	JR	L_7
L_5:
;   34	        append_child(result, new_expression(EXPT_STRUCTURE, EXPI_LIST, 0));
	LD	BC,0
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,4
	PUSH	BC
	CALL	_new_expression
	POP	BC
	POP	BC
	POP	BC
	PUSH	HL
	LD	BC,(IX+-5)
	PUSH	BC
	CALL	_append_child
	POP	BC
	POP	BC
;   35	        for (j = 0; j < colums; j++) {
	LD	(IX+-2),0
	JR	L_4
L_2:
;   36	            append_child(result->children[i], new_expression(EXPT_STRUCTURE, EXPI_LIST, 0));
	LD	BC,0
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,4
	PUSH	BC
	CALL	_new_expression
	POP	BC
	POP	BC
	POP	BC
	PUSH	HL
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	ADD	HL,HL
	LD	IY,(IX+-5)
	LD	DE,(IY+11)
	ADD	HL,BC
	ADD	HL,DE
	LD	BC,(HL)
	PUSH	BC
	CALL	_append_child
	POP	BC
	POP	BC
	INC	(IX+-2)
;   37	        }
L_4:
	LD	A,(IX+-2)
	CP	A,(IX+9)
	JR	C,L_2
	INC	(IX+-1)
;   38	    }
L_7:
	LD	A,(IX+-1)
	CP	A,(IX+6)
	JR	C,L_5
;   39	    
;   40	    result->child_count = rows;
	LD	A,(IX+6)
	LD	IY,(IX+-5)
	LD	(IY+10),A
;   41	    
;   42	    return result;
	LD	HL,(IX+-5)
;   43	    
;   44	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _new_matrix ***************************
;Name                         Addr/Register   Size   Type
;_append_child                       IMPORT  -----   function
;_new_expression                     IMPORT  -----   function
;result                                IX-5      3   variable
;j                                     IX-2      1   variable
;i                                     IX-1      1   variable
;colums                                IX+9      1   parameter
;rows                                  IX+6      1   parameter


; Stack Frame Size: 17 (bytes)
;       Spill Code: 0 (instruction)


;   45	
;   46	expression* new_sub_matrix(expression* matrix, uint8_t rows, uint8_t colums) {
_new_sub_matrix:
	LD	HL,-10
	CALL	__frameset
;   47	    
;   48	    uint8_t i, j;
;   49	    uint8_t a;
;   50	    uint8_t b;
;   51	    expression* result = new_matrix(matrix->child_count - 1, matrix->children[0]->child_count - 1);
	LD	IY,(IX+6)
	LD	HL,(IY+11)
	LD	IY,(HL)
	LD	C,(IY+10)
	DEC	C
	LD	B,0
	PUSH	BC
	LD	IY,(IX+6)
	LD	C,(IY+10)
	DEC	C
	PUSH	BC
	CALL	_new_matrix
	POP	BC
	POP	BC
	LD	(IX+-10),HL
;   52	    
;   53	    for (i = 0; i < matrix->child_count - 1; i++) {
	LD	(IX+-1),0
	JR	L_21
L_19:
;   54	        for (j = 0; j < matrix->children[0]->child_count -1; j++) {
	LD	(IX+-2),0
	JR	L_18
L_16:
;   55	            a = i;
	LD	A,(IX+-1)
	LD	(IX+-3),A
;   56	            if (i >= rows) {
	LD	A,(IX+-1)
	CP	A,(IX+9)
	JR	C,L_13
;   57	                a = i + 1;
	LD	A,(IX+-1)
	INC	A
	LD	(IX+-3),A
;   58	            }
L_13:
;   59	            b = i;
	LD	A,(IX+-1)
	LD	(IX+-4),A
;   60	            if (j >= colums) {
	LD	A,(IX+-2)
	CP	A,(IX+12)
	JR	C,L_15
;   61	                b = j + 1;
	LD	A,(IX+-2)
	INC	A
	LD	(IX+-4),A
;   62	            }
L_15:
;   63	            result->children[i]->children[j] = copy_expression(matrix->children[a]->children[b]);
	LD	A,(IX+-3)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,(IX+-7)
	ADD	HL,BC
	LD	IY,(HL)
	LD	A,(IX+-4)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,(IY+11)
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_copy_expression
	LD	BC,HL
	POP	DE
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	ADD	HL,HL
	ADD	HL,DE
	LD	IY,(IX+-10)
	LD	DE,(IY+11)
	ADD	HL,DE
	LD	IY,(HL)
	LD	A,(IX+-2)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	ADD	HL,HL
	ADD	HL,DE
	LD	DE,(IY+11)
	ADD	HL,DE
	LD	(HL),BC
	INC	(IX+-2)
;   64	        }
L_18:
	LD	IY,(IX+6)
	LD	BC,(IY+11)
	LD	(IX+-7),BC
	LD	HL,BC
	LD	IY,(HL)
	LD	A,(IY+10)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	DEC	BC
	LD	A,(IX+-2)
	UEXT	HL
	LD	L,A
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_16
	INC	(IX+-1)
;   65	    }
L_21:
	LD	IY,(IX+6)
	LD	A,(IY+10)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	DEC	BC
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_19
;   66	    
;   67	    return result;
	LD	HL,(IX+-10)
;   68	    
;   69	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _new_sub_matrix ***************************
;Name                         Addr/Register   Size   Type
;_copy_expression                    IMPORT  -----   function
;result                               IX-10      3   variable
;G_0                                   IX-7      3   variable
;b                                     IX-4      1   variable
;a                                     IX-3      1   variable
;j                                     IX-2      1   variable
;i                                     IX-1      1   variable
;colums                               IX+12      1   parameter
;rows                                  IX+9      1   parameter
;matrix                                IX+6      3   parameter


; Stack Frame Size: 25 (bytes)
;       Spill Code: 0 (instruction)


;   70	
;   71	void sylvester_matrix(expression** matrix, expression* a, expression* b) {
_sylvester_matrix:
	LD	HL,-20
	CALL	__frameset
;   72	    
;   73	    uint8_t i, j;
;   74	    expression* result;
;   75	    uint8_t a_degree = a->child_count - 1;
	LD	IY,(IX+9)
	LD	A,(IY+10)
	DEC	A
	LD	(IX+-4),A
;   76	    uint8_t b_degree = b->child_count - 1;
	LD	IY,(IX+12)
	LD	A,(IY+10)
	DEC	A
	LD	(IX+-3),A
;   77	    uint8_t size = a_degree + b_degree;
	LD	A,(IX+-4)
	ADD	A,(IX+-3)
	LD	(IX+-5),A
;   78	    
;   79	    result = new_matrix(size, size);
	LD	C,(IX+-5)
	LD	B,0
	PUSH	BC
	LD	C,(IX+-5)
	PUSH	BC
	CALL	_new_matrix
	POP	BC
	POP	BC
	LD	(IX+-8),HL
;   80	    
;   81	    for (i = 0; i < a_degree + 1; i++) {
	LD	(IX+-1),0
	JR	L_31
L_29:
;   82	        for (j = 0; j < b_degree; j++) {
	LD	(IX+-2),0
	JR	L_28
L_26:
;   83	            result->children[j]->children[i + j] = copy_expression(a->children[a->child_count - 1 - i]);
	LD	IY,(IX+9)
	LD	A,(IY+10)
	UEXT	HL
	LD	L,A
	LD	A,(IX+-1)
	LD	DE,(IY+11)
	LD	BC,HL
	DEC	BC
	UEXT	HL
	LD	L,A
	LD	(IX+-17),BC	; spill
	LD	(IX+-20),HL	; spill
	LD	HL,BC
	OR	A,A
	LD	BC,(IX+-20)	; unspill
	SBC	HL,BC
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	ADD	HL,DE
	LD	BC,(HL)
	PUSH	BC
	CALL	_copy_expression
	LD	BC,HL
	POP	DE
	LD	A,(IX+-2)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	ADD	HL,HL
	ADD	HL,DE
	LD	IY,(IX+-8)
	LD	DE,(IY+11)
	ADD	HL,DE
	LD	IY,(HL)
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	LD	A,(IX+-2)
	UEXT	HL
	LD	L,A
	ADD	HL,DE
	LD	DE,HL
	ADD	HL,HL
	ADD	HL,DE
	LD	DE,(IY+11)
	ADD	HL,DE
	LD	(HL),BC
	INC	(IX+-2)
;   84	        }
L_28:
	LD	A,(IX+-2)
	CP	A,(IX+-3)
	JR	C,L_26
	INC	(IX+-1)
;   85	    }
L_31:
	LD	A,(IX+-4)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	INC	BC
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_29
;   86	    
;   87	    for (i = 0; i < b_degree + 1; i++) {
	LD	(IX+-1),0
	JR	L_39
L_37:
;   88	        for (j = 0; j < a_degree; j++) {
	LD	(IX+-2),0
	JR	L_36
L_34:
;   89	            result->children[j + b_degree]->children[i + j] = copy_expression(b->children[b->child_count - 1 - i]);
	LD	IY,(IX+12)
	LD	A,(IY+10)
	UEXT	HL
	LD	L,A
	LD	A,(IX+-1)
	LD	DE,(IY+11)
	LD	BC,HL
	DEC	BC
	UEXT	HL
	LD	L,A
	LD	(IX+-11),BC	; spill
	LD	(IX+-14),HL	; spill
	LD	HL,BC
	OR	A,A
	LD	BC,(IX+-14)	; unspill
	SBC	HL,BC
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	ADD	HL,DE
	LD	BC,(HL)
	PUSH	BC
	CALL	_copy_expression
	LD	BC,HL
	POP	DE
	LD	A,(IX+-2)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	LD	A,(IX+-3)
	UEXT	HL
	LD	L,A
	ADD	HL,DE
	LD	DE,HL
	ADD	HL,HL
	ADD	HL,DE
	LD	IY,(IX+-8)
	LD	DE,(IY+11)
	ADD	HL,DE
	LD	IY,(HL)
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	DE,HL
	LD	A,(IX+-2)
	UEXT	HL
	LD	L,A
	ADD	HL,DE
	LD	DE,HL
	ADD	HL,HL
	ADD	HL,DE
	LD	DE,(IY+11)
	ADD	HL,DE
	LD	(HL),BC
	INC	(IX+-2)
;   90	        }
L_36:
	LD	A,(IX+-2)
	CP	A,(IX+-4)
	JR	C,L_34
	INC	(IX+-1)
;   91	    }
L_39:
	LD	A,(IX+-3)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	INC	BC
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	OR	A,A
	SBC	HL,BC
	CALL	__setflag
	JP	M,L_37
;   92	    
;   93	    *matrix = result;
	LD	HL,(IX+6)
	LD	BC,(IX+-8)
	LD	(HL),BC
;   94	    
;   95	}
	LD	SP,IX
	POP	IX
	RET	


;**************************** _sylvester_matrix ***************************
;Name                         Addr/Register   Size   Type
;_copy_expression                    IMPORT  -----   function
;result                                IX-8      3   variable
;size                                  IX-5      1   variable
;a_degree                              IX-4      1   variable
;b_degree                              IX-3      1   variable
;j                                     IX-2      1   variable
;i                                     IX-1      1   variable
;b                                    IX+12      3   parameter
;a                                     IX+9      3   parameter
;matrix                                IX+6      3   parameter


; Stack Frame Size: 35 (bytes)
;       Spill Code: -2 (instruction)


;   96	
;   97	void gauss_determinant(expression** determinant, const expression* matrix) {
_gauss_determinant:
	LD	HL,-31
	CALL	__frameset
;   98	    
;   99	    uint8_t i, j;
;  100	    uint8_t factor = 1;
	LD	(IX+-10),1
;  101	    uint8_t max = 0;
	LD	(IX+-3),0
;  102	    expression* sub_matrix;
;  103	    expression* f;
;  104	    expression* new_row = new_expression(EXPT_STRUCTURE, EXPI_LIST, 0);
	LD	BC,0
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,4
	PUSH	BC
	CALL	_new_expression
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-9),HL
;  105	    expression* new_determinant = smart_alloc(1, sizeof(expression));
	LD	BC,24
	PUSH	BC
	LD	BC,1
	PUSH	BC
	CALL	_smart_alloc
	POP	BC
	POP	BC
	LD	(IX+-19),HL
;  106	    expression* result;
;  107	    
;  108	    if (matrix->child_count == 1 && matrix->children[0]->child_count == 1) {
	LD	IY,(IX+9)
	LD	A,(IY+10)
	CP	A,1
	JR	NZ,L_50
	LD	IY,(IX+9)
	LD	BC,(IY+11)
	LD	(IX+-16),BC
	LD	HL,BC
	LD	IY,(HL)
	LD	A,(IY+10)
	CP	A,1
	JR	NZ,L_50
;  109	        *determinant = copy_expression(matrix->children[0]->children[0]);
	LD	HL,(IX+-16)
	LD	IY,(HL)
	LD	HL,(IY+11)
	LD	BC,(HL)
	PUSH	BC
	CALL	_copy_expression
	POP	BC
	LD	IY,(IX+6)
	LD	(IY),HL
;  110	        return;
	JR	L_69
;  111	    }
L_50:
;  112	    
;  113	    for (i = 0; i < matrix->child_count; i++) {
	LD	(IX+-1),0
	JR	L_49
L_47:
;  114	        if (!expressions_are_equivalent(matrix->children[i]->children[0], new_literal(1, 0, 1), false)) {
	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	BC,1
	PUSH	BC
	CALL	_new_literal
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	PUSH	HL
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	IY,(IX+9)
	LD	BC,(IY+11)
	LD	DE,HL
	ADD	HL,HL
	ADD	HL,DE
	ADD	HL,BC
	LD	IY,(HL)
	LD	HL,(IY+11)
	LD	BC,(HL)
	PUSH	BC
	CALL	_expressions_are_equivalent
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	NZ,L_48
;  115	            max = i;
	LD	A,(IX+-1)
	LD	(IX+-3),A
;  116	            break;
	JR	L_67
;  117	        }
;  118	    }
L_48:
	INC	(IX+-1)
L_49:
	LD	A,(IX+-1)
	LD	IY,(IX+9)
	CP	A,(IY+10)
	JR	C,L_47
L_67:
;  119	    
;  120	    if (expressions_are_equivalent(matrix->children[max]->children[0], new_literal(1, 0, 1), false)) {
	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	BC,1
	PUSH	BC
	CALL	_new_literal
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	PUSH	HL
	LD	A,(IX+-3)
	UEXT	HL
	LD	L,A
	LD	IY,(IX+9)
	LD	BC,(IY+11)
	LD	DE,HL
	ADD	HL,HL
	ADD	HL,DE
	ADD	HL,BC
	LD	IY,(HL)
	LD	HL,(IY+11)
	LD	BC,(HL)
	PUSH	BC
	CALL	_expressions_are_equivalent
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_66
;  121	        
;  122	        *determinant = new_literal(1, 0, 1);
	LD	BC,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	BC,1
	PUSH	BC
	CALL	_new_literal
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	IY,(IX+6)
	LD	(IY),HL
;  123	        return;
	JR	L_69
;  124	        
;  125	    } else {
L_66:
;  126	        
;  127	        swap_expressions(matrix->children[0], matrix->children[max]);
	LD	IY,(IX+9)
	LD	BC,(IY+11)
	LD	(IX+-25),BC
	LD	A,(IX+-3)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,(IX+-25)
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	LD	HL,(IX+-25)
	LD	BC,(HL)
	PUSH	BC
	CALL	_swap_expressions
	POP	BC
	POP	BC
;  128	        
;  129	        if (max != 0) {
	LD	A,(IX+-3)
	OR	A,A
	JR	Z,L_52
;  130	            factor *= -1;
	LD	(IX+-10),255
;  131	        }
L_52:
;  132	        
;  133	        sub_matrix = new_sub_matrix(copy_expression(matrix), 0, 0);
	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	BC,(IX+9)
	PUSH	BC
	CALL	_copy_expression
	POP	BC
	PUSH	HL
	CALL	_new_sub_matrix
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-13),HL
;  134	        
;  135	        for (i = 1; i < matrix->child_count; i++) {
	LD	(IX+-1),1
	JR	L_63
L_61:
;  136	            
;  137	            f = new_expression(EXPT_OPERATION, EXPI_DIVISION, 2,
;  138	                               new_expression(EXPT_OPERATION, EXPI_MULTIPLICATION, 2,
;  139	                                              new_literal(-1, 1, 1),
;  140	                                              copy_expression(matrix->children[i]->children[0])),
;  141	                               copy_expression(matrix->children[0]->children[0]));
	LD	IY,(IX+9)
	LD	HL,(IY+11)
	LD	IY,(HL)
	LD	HL,(IY+11)
	LD	BC,(HL)
	PUSH	BC
	CALL	_copy_expression
	POP	BC
	PUSH	HL
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	ADD	HL,HL
	LD	IY,(IX+9)
	LD	DE,(IY+11)
	ADD	HL,BC
	ADD	HL,DE
	LD	IY,(HL)
	LD	HL,(IY+11)
	LD	BC,(HL)
	PUSH	BC
	CALL	_copy_expression
	POP	BC
	PUSH	HL
	LD	BC,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,16777215
	PUSH	BC
	CALL	_new_literal
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	PUSH	HL
	LD	BC,2
	PUSH	BC
	LD	BC,7
	PUSH	BC
	LD	BC,2
	PUSH	BC
	CALL	_new_expression
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	PUSH	HL
	LD	BC,2
	PUSH	BC
	LD	BC,8
	PUSH	BC
	LD	BC,2
	PUSH	BC
	CALL	_new_expression
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-6),HL
;  142	            
;  143	            replace_null_with_zero(f);
	LD	BC,HL
	PUSH	BC
	CALL	_replace_null_with_zero
	POP	BC
;  144	            any_expression_to_expression_recursive(f);
	LD	BC,(IX+-6)
	PUSH	BC
	CALL	_any_expression_to_expression_recursive
	POP	BC
;  145	            
;  146	            simplify(f, true);
	LD	BC,1
	PUSH	BC
	LD	BC,(IX+-6)
	PUSH	BC
	CALL	_simplify
	POP	BC
	POP	BC
;  147	            
;  148	            if (expression_contains_division(f) != -1) {
	LD	BC,(IX+-6)
	PUSH	BC
	CALL	_expression_contains_division
	POP	BC
	LD	B,A
	SEXT	HL
	LD	L,B
	OR	A,A
	LD	BC,16777215
	SBC	HL,BC
	JR	Z,L_55
;  149	                make_monic(f->children[1]);
	LD	IY,(IX+-6)
	LD	IY,(IY+11)
	LEA	HL,IY+3
	LD	BC,(HL)
	PUSH	BC
	CALL	_make_monic
	POP	BC
;  150	            }
L_55:
;  151	            
;  152	            new_row = new_expression(EXPT_STRUCTURE, EXPI_LIST, 0);
	LD	BC,0
	PUSH	BC
	LD	BC,40
	PUSH	BC
	LD	BC,4
	PUSH	BC
	CALL	_new_expression
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-9),HL
;  153	            
;  154	            for (j = 1; j < matrix->child_count; j++) {
	LD	(IX+-2),1
	JR	L_59
L_57:
;  155	                append_child(new_row, new_expression(EXPT_OPERATION, EXPI_ADDITION, 2,
;  156	                                                     new_expression(EXPT_OPERATION, EXPI_MULTIPLICATION, 2,
;  157	                                                                    copy_expression(f),
;  158	                                                                    copy_expression(matrix->children[0]->children[j])),
;  159	                                                     copy_expression(sub_matrix->children[i - 1]->children[j - 1])));
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	DEC	HL
	LD	BC,HL
	ADD	HL,HL
	LD	IY,(IX+-13)
	LD	DE,(IY+11)
	ADD	HL,BC
	ADD	HL,DE
	LD	IY,(HL)
	LD	A,(IX+-2)
	UEXT	HL
	LD	L,A
	DEC	HL
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	BC,(IY+11)
	ADD	HL,BC
	LD	BC,(HL)
	PUSH	BC
	CALL	_copy_expression
	POP	BC
	PUSH	HL
	LD	IY,(IX+9)
	LD	HL,(IY+11)
	LD	(IX+-31),HL	; spill
	LD	A,(IX+-2)
	UEXT	HL
	LD	L,A
	LD	BC,HL
	ADD	HL,HL
	LD	(IX+-28),HL	; spill
	LD	HL,(IX+-31)	; unspill
	LD	IY,(HL)
	LD	HL,(IX+-28)	; unspill
	LD	DE,(IY+11)
	ADD	HL,BC
	ADD	HL,DE
	LD	BC,(HL)
	PUSH	BC
	CALL	_copy_expression
	POP	BC
	PUSH	HL
	LD	BC,(IX+-6)
	PUSH	BC
	CALL	_copy_expression
	POP	BC
	PUSH	HL
	LD	BC,2
	PUSH	BC
	LD	BC,7
	PUSH	BC
	LD	BC,2
	PUSH	BC
	CALL	_new_expression
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	PUSH	HL
	LD	BC,2
	PUSH	BC
	LD	BC,5
	PUSH	BC
	LD	BC,2
	PUSH	BC
	CALL	_new_expression
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	PUSH	HL
	LD	BC,(IX+-9)
	PUSH	BC
	CALL	_append_child
	POP	BC
	POP	BC
	INC	(IX+-2)
;  160	            }
L_59:
	LD	A,(IX+-2)
	LD	IY,(IX+9)
	CP	A,(IY+10)
	JR	C,L_57
;  161	            
;  162	            replace_null_with_zero(new_row);
	LD	BC,(IX+-9)
	PUSH	BC
	CALL	_replace_null_with_zero
	POP	BC
;  163	            any_expression_to_expression_recursive(new_row);
	LD	BC,(IX+-9)
	PUSH	BC
	CALL	_any_expression_to_expression_recursive
	POP	BC
;  164	            simplify(new_row, true);
	LD	BC,1
	PUSH	BC
	LD	BC,(IX+-9)
	PUSH	BC
	CALL	_simplify
	POP	BC
	POP	BC
;  165	            
;  166	            sub_matrix->children[i - 1] = copy_expression(new_row);
	LD	BC,(IX+-9)
	PUSH	BC
	CALL	_copy_expression
	LD	DE,HL
	POP	BC
	LD	A,(IX+-1)
	UEXT	HL
	LD	L,A
	DEC	HL
	LD	BC,HL
	ADD	HL,HL
	ADD	HL,BC
	LD	IY,(IX+-13)
	LD	BC,(IY+11)
	ADD	HL,BC
	LD	(HL),DE
	INC	(IX+-1)
;  167	            
;  168	        }
L_63:
	LD	A,(IX+-1)
	LD	IY,(IX+9)
	CP	A,(IY+10)
	JR	C,L_61
;  169	        
;  170	        gauss_determinant(&new_determinant, sub_matrix);
	LD	BC,(IX+-13)
	PUSH	BC
	PEA	IX+-19
	CALL	_gauss_determinant
	POP	BC
	POP	BC
;  171	        
;  172	        result = new_expression(EXPT_OPERATION, EXPI_MULTIPLICATION, 3,
;  173	                                 copy_expression(matrix->children[0]->children[0]),
;  174	                                 copy_expression(new_determinant),
;  175	                                 new_literal(factor, 1, 1));
	LD	BC,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	C,(IX+-10)
	LD	B,0
	PUSH	BC
	CALL	_new_literal
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	PUSH	HL
	LD	BC,(IX+-19)
	PUSH	BC
	CALL	_copy_expression
	POP	BC
	PUSH	HL
	LD	IY,(IX+9)
	LD	HL,(IY+11)
	LD	IY,(HL)
	LD	HL,(IY+11)
	LD	BC,(HL)
	PUSH	BC
	CALL	_copy_expression
	POP	BC
	PUSH	HL
	LD	BC,3
	PUSH	BC
	LD	BC,7
	PUSH	BC
	LD	BC,2
	PUSH	BC
	CALL	_new_expression
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-22),HL
;  176	        
;  177	        simplify(result, true);
	LD	BC,1
	PUSH	BC
	LD	BC,(IX+-22)
	PUSH	BC
	CALL	_simplify
	POP	BC
	POP	BC
;  178	        
;  179	    }
;  180	    
;  181	    *determinant = result;
	LD	HL,(IX+6)
	LD	BC,(IX+-22)
	LD	(HL),BC
;  182	    
;  183	}
L_69:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _gauss_determinant ***************************
;Name                         Addr/Register   Size   Type
;_append_child                       IMPORT  -----   function
;_make_monic                         IMPORT  -----   function
;_expression_contains_division       IMPORT  -----   function
;_simplify                           IMPORT  -----   function
;_any_expression_to_expression_recursive      IMPORT  -----   function
;_replace_null_with_zero             IMPORT  -----   function
;_swap_expressions                   IMPORT  -----   function
;_new_literal                        IMPORT  -----   function
;_expressions_are_equivalent         IMPORT  -----   function
;_copy_expression                    IMPORT  -----   function
;_smart_alloc                        IMPORT  -----   function
;_new_expression                     IMPORT  -----   function
;result                               IX-22      3   variable
;new_determinant                      IX-19      3   variable
;G_1                                  IX-16      3   variable
;sub_matrix                           IX-13      3   variable
;factor                               IX-10      1   variable
;new_row                               IX-9      3   variable
;f                                     IX-6      3   variable
;max                                   IX-3      1   variable
;j                                     IX-2      1   variable
;i                                     IX-1      1   variable
;matrix                                IX+9      3   parameter
;determinant                           IX+6      3   parameter


; Stack Frame Size: 43 (bytes)
;       Spill Code: -2 (instruction)


;  184	
;  185	void calculate_resultant(expression** result, expression* a, expression* b) {
_calculate_resultant:
	LD	HL,-6
	CALL	__frameset
;  186	    
;  187	    expression* matrix = new_expression(EXPT_STRUCTURE, EXPI_MATRIX, 0);
	LD	BC,0
	PUSH	BC
	LD	BC,41
	PUSH	BC
	LD	BC,4
	PUSH	BC
	CALL	_new_expression
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-6),HL
;  188	    expression* determinant = new_expression(EXPT_NULL, EXPI_NULL, 0);
	LD	BC,0
	PUSH	BC
	PUSH	BC
	PUSH	BC
	CALL	_new_expression
	POP	BC
	POP	BC
	POP	BC
	LD	(IX+-3),HL
;  189	    
;  190	    if (a->child_count == 1) {
	LD	IY,(IX+9)
	LD	A,(IY+10)
	CP	A,1
	JR	NZ,L_85
;  191	        if (expression_is_numerical(a->children[0])) {
	LD	IY,(IX+9)
	LD	HL,(IY+11)
	LD	BC,(HL)
	PUSH	BC
	CALL	_expression_is_numerical
	POP	BC
	OR	A,A
	JR	Z,L_81
;  192	            if (expressions_are_identical(a->children[0], new_literal(1, 0, 1), false)) {
	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	BC,1
	PUSH	BC
	CALL	_new_literal
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	PUSH	HL
	LD	IY,(IX+9)
	LD	HL,(IY+11)
	LD	BC,(HL)
	PUSH	BC
	CALL	_expressions_are_identical
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_74
;  193	                *result = new_literal(1, 0, 1);
	LD	BC,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	BC,1
	PUSH	BC
	CALL	_new_literal
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	IY,(IX+6)
	LD	(IY),HL
;  194	                return;
	JR	L_87
;  195	            } else {
L_74:
;  196	                if (b->child_count == 0) {
	LD	IY,(IX+12)
	LD	A,(IY+10)
	OR	A,A
	JR	NZ,L_85
;  197	                    if (expression_is_numerical(b->children[0])) {
	LD	IY,(IX+12)
	LD	HL,(IY+11)
	LD	BC,(HL)
	PUSH	BC
	CALL	_expression_is_numerical
	POP	BC
	OR	A,A
	JR	Z,L_85
;  198	                        if (!expressions_are_identical(b->children[0], new_literal(1, 0, 1), false)) {
	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	BC,1
	PUSH	BC
	CALL	_new_literal
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	PUSH	HL
	LD	IY,(IX+12)
	LD	HL,(IY+11)
	LD	BC,(HL)
	PUSH	BC
	CALL	_expressions_are_identical
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	NZ,L_85
;  199	                            *result = new_literal(1, 1, 1);
	LD	BC,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	PUSH	BC
	CALL	_new_literal
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	IY,(IX+6)
	LD	(IY),HL
;  200	                            return;
	JR	L_87
;  201	                        }
;  202	                    }
;  203	                }
;  204	            }
;  205	        } else {
L_81:
;  206	            if (expressions_are_identical(a->children[0], new_literal(1, 0, 1), false)) {
	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	BC,1
	PUSH	BC
	CALL	_new_literal
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	PUSH	HL
	LD	IY,(IX+9)
	LD	HL,(IY+11)
	LD	BC,(HL)
	PUSH	BC
	CALL	_expressions_are_identical
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	Z,L_79
;  207	                *result = new_literal(1, 0, 1);
	LD	BC,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	BC,1
	PUSH	BC
	CALL	_new_literal
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	IY,(IX+6)
	LD	(IY),HL
;  208	                return;
	JR	L_87
;  209	            } else {
L_79:
;  210	                if (b->child_count == 0) {
	LD	IY,(IX+12)
	LD	A,(IY+10)
	OR	A,A
	JR	NZ,L_85
;  211	                    if (expression_is_numerical(b->children[0])) {
	LD	IY,(IX+12)
	LD	HL,(IY+11)
	LD	BC,(HL)
	PUSH	BC
	CALL	_expression_is_numerical
	POP	BC
	OR	A,A
	JR	Z,L_85
;  212	                        if (!expressions_are_identical(b->children[0], new_literal(1, 0, 1), false)) {
	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	BC,1
	PUSH	BC
	CALL	_new_literal
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	PUSH	HL
	LD	IY,(IX+12)
	LD	HL,(IY+11)
	LD	BC,(HL)
	PUSH	BC
	CALL	_expressions_are_identical
	POP	BC
	POP	BC
	POP	BC
	OR	A,A
	JR	NZ,L_85
;  213	                            *result = new_literal(1, 1, 1);
	LD	BC,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	PUSH	BC
	CALL	_new_literal
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	IY,(IX+6)
	LD	(IY),HL
;  214	                            return;
	JR	L_87
;  215	                        }
;  216	                    }
;  217	                }
;  218	            }
;  219	        }
;  220	    }
L_85:
;  221	    
;  222	    if (b->child_count == 1) {
	LD	IY,(IX+12)
	LD	A,(IY+10)
	CP	A,1
	JR	NZ,L_86
;  223	        if (expression_is_numerical(b->children[0])) {
	LD	IY,(IX+12)
	LD	HL,(IY+11)
	LD	BC,(HL)
	PUSH	BC
	CALL	_expression_is_numerical
	POP	BC
	OR	A,A
	JR	Z,L_86
;  224	            *result = new_literal(1, 0, 1);
	LD	BC,0
	PUSH	BC
	LD	BC,1
	PUSH	BC
	LD	BC,0
	PUSH	BC
	PUSH	BC
	LD	BC,1
	PUSH	BC
	CALL	_new_literal
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	POP	BC
	LD	IY,(IX+6)
	LD	(IY),HL
;  225	            return;
	JR	L_87
;  226	        }
;  227	    }
L_86:
;  228	    
;  229	    sylvester_matrix(&matrix, a, b);
	LD	BC,(IX+12)
	PUSH	BC
	LD	BC,(IX+9)
	PUSH	BC
	PEA	IX+-6
	CALL	_sylvester_matrix
	POP	BC
	POP	BC
	POP	BC
;  230	    gauss_determinant(&determinant, matrix);
	LD	BC,(IX+-6)
	PUSH	BC
	PEA	IX+-3
	CALL	_gauss_determinant
	POP	BC
	POP	BC
;  231	    simplify(determinant, true);
	LD	BC,1
	PUSH	BC
	LD	BC,(IX+-3)
	PUSH	BC
	CALL	_simplify
	POP	BC
	POP	BC
;  232	    any_expression_to_dense_polynomial(determinant, new_symbol(EXPI_SYMBOL, "EZ"));
	LD	BC,L__35
	PUSH	BC
	LD	BC,2
	PUSH	BC
	CALL	_new_symbol
	POP	BC
	POP	BC
	PUSH	HL
	LD	BC,(IX+-3)
	PUSH	BC
	CALL	_any_expression_to_dense_polynomial
	POP	BC
	POP	BC
;  233	    
;  234	    *result = determinant;
	LD	HL,(IX+6)
	LD	BC,(IX+-3)
	LD	(HL),BC
;  235	    
;  236	}
L_87:
	LD	SP,IX
	POP	IX
	RET	


;**************************** _calculate_resultant ***************************
;Name                         Addr/Register   Size   Type
;_new_symbol                         IMPORT  -----   function
;_any_expression_to_dense_polynomial      IMPORT  -----   function
;_simplify                           IMPORT  -----   function
;_new_literal                        IMPORT  -----   function
;_expressions_are_identical          IMPORT  -----   function
;_expression_is_numerical            IMPORT  -----   function
;_new_expression                     IMPORT  -----   function
;matrix                                IX-6      3   variable
;determinant                           IX-3      3   variable
;b                                    IX+12      3   parameter
;a                                     IX+9      3   parameter
;result                                IX+6      3   parameter


; Stack Frame Size: 21 (bytes)
;       Spill Code: -2 (instruction)


	SEGMENT STRSECT
L__35:
	DB	"EZ"
	DB	0
	XREF _simplify:ROM
	XREF _make_monic:ROM
	XREF _any_expression_to_dense_polynomial:ROM
	XREF _any_expression_to_expression_recursive:ROM
	XREF _replace_null_with_zero:ROM
	XREF _swap_expressions:ROM
	XREF _expression_is_numerical:ROM
	XREF _expression_contains_division:ROM
	XREF _expressions_are_equivalent:ROM
	XREF _expressions_are_identical:ROM
	XREF _append_child:ROM
	XREF _copy_expression:ROM
	XREF _new_symbol:ROM
	XREF _new_literal:ROM
	XREF _new_expression:ROM
	XREF _smart_alloc:ROM
	XREF __frameset:ROM
	XREF __setflag:ROM
	XDEF _calculate_resultant
	XDEF _gauss_determinant
	XDEF _sylvester_matrix
	XDEF _new_sub_matrix
	XDEF _new_matrix
	END
